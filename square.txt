in
in
in
pop rcx
pop rbx
pop rax
call solve_dispetcher                                       ;Вызываем функцию, которая определяет вид уравнения (линейное или квадратное).
hlt


solve_dispetcher:                                           ;Функция, определяющая вид уравнения
    push 0
    push rax
    je call_solve_linear                                    ;Если rax  = 0, то прыгаем на вызов функции линейного уравнения.
    jne call_solve_square                                   ;Если rax != 0, то прыгаем на вызов функции квадратного уравнения.
    ret

call_solve_linear:
    call solve_linear                                       ;Вызов функции линейного уравнения.
    ret

call_solve_square:
    call solve_square                                       ;Вызов функции квадратного уравнения.
    ret


check_infinity_or_no_solutions:                             ;Функция, определяющая, бесконечно количество корней у уравнение или их не существует.
    push rcx
    push 0
    jne call_print_no_solve                                 ;Если rcx != 0, то прыгаем на вызов функции вывода в консоль сообщения, что корней нет.
    je call_print_infinity_solutions                        ;Если rcx  = 0, то прыгаем на вызов функции вывода в консоль сообщения, что корней бесконечно.
    ret

call_print_no_solve:
    call print_no_solve                                     ;Вызываем функцию, которая выводит сообщение, что корней нет.
    ret

call_print_infinity_solutions:
    call print_infinity_solutions                           ;Вызываем функцию, которая выводит сообщение, что корней бесконечное количество.
    ret


solve_linear:                                               ;Функция решения линейного уравнения.
    push 0
    push rbx
    je call_check_infinity_or_no_solutions                  ;Если rbx  = 0, то прыгаем на вызов функции проверки, есть ли у уравнения корни, или их бесконечное количество. 
    jne call_print_one_solutions                            ;Если rbx != 0, то прыгаем на решение линейного уравнения.
    ret

call_check_infinity_or_no_solutions:
    call check_infinity_or_no_solutions                     ;Вызываем функцию проверки, есть ли у уравнения корни, или их бесконечное количество. 
    ret

call_print_one_solutions:
    call print_one_solutions                                ;Вызываем функцию вывода, что у уравнения один корень.
    push -1
    push rcx
    mul
    push rbx
    div
    out
    ret


solve_square:                                               ;Функция, решающая квадратное уравнение.
    call discr                                              ;Вызываем функцию подсчета дискриминанта.
    push 0
    push rdx
    je call_discr_null                                      ;Если rdx == 0, то прыгаем на вызов функции, для решения квадратного уравнения в данном случае.
    jb call_print_no_solve                                  ;Если rdx  < 0, то прыгаем на вызов функции, которая выводит сообщение, что корней нет.

    push rdx
    sqrt
    pop rdx

    call print_two_solutions                                ;Вызываем функцию вывода в файл сообщения, что уравнение имеет два корня.

    push -1
    push rbx
    mul
    push rdx
    sub
    push 2
    push rax
    mul
    div
    out                                                     ;Выводим первый корень.

    push -1
    push rbx
    mul
    push rdx
    add
    push 2
    push rax
    mul
    div
    out                                                     ;Выводим второй корень.
    ret

call_discr_null:
    CALL discr_null                                         ;Вызываем функцию подсчета корня, если дискриминант равен 0.
    ret

call_print_no_solve:
    call print_no_solve                                     ;Вызываем функцию вывода сообщения, что уравнение не имеет корней.
    ret


discr_null:                                                 ;Функция подсчета корня, если дискриминант равен 0.
    call print_one_solutions                                ;Вызываем функцию вывода сообщения, что уравнение имеет один корень.

    push -1
    push rbx
    mul
    push 2
    push rax
    mul
    div
    out                                                     ;Выводим корень.
    ret


discr:                                                      ;Функция подсчета дискриминанта.
    push rbx
    push rbx
    mul
    push 4
    push rax
    push rcx
    mul
    mul
    sub
    pop rdx                                                 ;В rdx записываем значение дискриминанта.
    ret


print_no_solve:                                             ;Функция вывода в файл сообщения, что уравнение не имеет корней.
    push 78
    push 111
    push 32
    push 115
    push 111
    push 108
    push 117
    push 116
    push 105
    push 111
    push 110
    push 115
    outc 12
    ret


print_one_solutions:                                        ;Функция вывода в файл сообщения, что уравнение имеет один корень.
    push 79
    push 110
    push 101
    push 32
    push 115
    push 111
    push 108
    push 117
    push 116
    push 105
    push 111
    push 110
    push 115
    outc 13
    ret


print_two_solutions:                                        ;Функция вывода в файл сообщения, что уравнение имеет два корня.
    push 84
    push 119
    push 111
    push 32
    push 115
    push 111
    push 108
    push 117
    push 116
    push 105
    push 111
    push 110
    push 115
    outc 13
    ret


print_infinity_solutions:                                   ;Функция вывода в файл сообщения, что корней бесконечное количество.
    push 73
    push 110
    push 102
    push 105
    push 110
    push 105
    push 116
    push 121
    push 32
    push 115
    push 111
    push 108
    push 117
    push 116
    push 105
    push 111
    push 110
    push 115
    outc 18
    ret