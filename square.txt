in
in
in
draw
pop rcx
pop rbx
pop rax
CALL discr
push 0
push rdx
je solve_linear
ja solve_square
jb no_solve

discr:
    push rbx
    push rbx
    mul
    push 4
    push rax
    push rcx
    mul
    mul
    sub
    pop rdx
    ret

solve_linear:
    push -1
    push rbx
    mul
    push 2
    push rax
    mul
    div
    out
    hlt

solve_square:
    push rdx
    sqrt
    pop rdx


    push -1
    push rbx
    mul
    push rdx
    sub
    push 2
    push rax
    mul
    div
    out


    push -1
    push rbx
    mul
    push rdx
    add
    push 2
    push rax
    mul
    div
    out

    hlt

no_solve:
    hlt